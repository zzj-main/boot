多态
同一个对象 在不同时刻表现出来的不同形态

前提，体现
有继承、实现关系
有方法重写
有父类引用指向子类对象

多态成员访问特点
成员变量：编译，执行都看左边
成员方法：编译看左边 ，执行看右边

两端不一样的情况
因为成员方法有重写，而成员变量没有

多态的好处和弊端
好处：
多态提高了程序的扩展性，
具体体现，定义方法的时候，使用父类型作为参数，将来在使用的时候，使用具体的子类型参与操作
弊端
不能使用子类的特有功能

多态的转型
向上转型
    从子到父
        父类引用指向子类对象
向下转型
    从父到子
        父类引用转为子类对象
抽象类的特点
抽象类，抽象方法 都必须使用abstract 关键字
一个抽象类可以没有抽象方法，但是抽象方法一定在抽象类中
抽象类不能被实例化
 想要实例化抽象类，可以参照多态的方式，通过子类对象进行实例化，称为抽象类多态。
抽象类的子类
    子类要么重写抽象类中的所有抽象方法。
    要么该子类也是一个抽象类
抽象类的成员特点
    成员变量
        可以是变量
        也可以是常量
    构造方法
        有构造方法，但是不能直接实例化
        其作用:用于子类访问父类数据的初始化
    成员方法
        可以有抽象方法：限定子类必须完成的动作
        也可以有非抽象方法，提高代码复用性


